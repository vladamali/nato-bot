import time
import logging

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove

from commons import GetStatistics, create_keyboard, load_data


countries, statistics, data = load_data('statistics.csv')
countries_str = '\n'.join(f"{i + 1}. {c}" for i, c in enumerate(countries))

stats_kb = create_keyboard(statistics)

async def start_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    user_name = message.from_user.username
    logging.info(f'{time.asctime()}: {user_id} @{user_name}: {message.text}')

    await state.finish()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_full_name}! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –ù–ê–¢–û.\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å "
        "–∏–ª–∏ –≤–≤–µ–¥–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        reply_markup=stats_kb)
    await state.set_state(GetStatistics.waiting_for_stat.state)


async def cancel_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username
    logging.info(f'{time.asctime()}: {user_id} @{user_name}: {message.text}')

    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
                         reply_markup=types.ReplyKeyboardRemove())


async def country_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username
    logging.info(f'{time.asctime()}: {user_id} @{user_name}: {message.text}')

    if message.text not in statistics:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ "
                             "–∏–ª–∏ –≤–≤–µ–¥–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return
    await state.update_data(statistic=message.text)
    await state.set_state(GetStatistics.waiting_for_country.state)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω—ã:\n"
                         f"{countries_str}",
                         reply_markup=ReplyKeyboardRemove())


async def stat_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    user_name = message.from_user.username
    logging.info(f'{time.asctime()}: {user_id} @{user_name}: {message.text}')

    number = int(message.text) if message.text.isdecimal() else None
    if number and number in range(1, len(countries) + 1):
        await state.update_data(country = number - 1)
        user_data = await state.get_data()
        await message.answer(
            f"–°—Ç—Ä–∞–Ω–∞: {countries[user_data['country']]}\n"
            f"{user_data['statistic']}: "
            f"{data[user_data['statistic']][user_data['country']]}",
            reply_markup=stats_kb)
        await message.answer("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏ /cancel "
                             "–¥–ª—è –æ—Ç–º–µ–Ω—ã")
        await state.set_state(GetStatistics.waiting_for_stat.state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ "
                             "–∏–ª–∏ –≤–≤–µ–¥–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return


async def default_handler(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    logging.info(f'{time.asctime()}: {user_id} @{user_name}: {message.text}')
    await message.answer("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üòî\n"
                         "–í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=["start"], state='*')
    dp.register_message_handler(cancel_handler, commands=["cancel"], state='*')
    dp.register_message_handler(country_handler,
                                state=GetStatistics.waiting_for_stat)
    dp.register_message_handler(stat_handler,
                                state=GetStatistics.waiting_for_country)
    dp.register_message_handler(default_handler)
